height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
View(BMI)
# Get the class of the vector.
print(class(apple));
# Create a vector.
apple <- c('red','green',"yellow");
apple <- c('red','green',"yellow");
print(apple);
# Get the class of the vector.
print(class(apple));
# Create a list.
list1 <- list(c(2,5,3),21.3,sin);
# Print the list.
print(list1);
# Create a list.
list1 <- list(c(2,5,3),21.3,sin);
# Print the list.
print(list1);
# Create a matrix.
M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M)
# Create an array.
a <- array(c('green','yellow'),dim = c(3,3,2))
print(a)
# Create a vector.
apple_colors <- c('green','green','yellow','red','red','red','green')
# Create a factor object.
factor_apple <- factor(apple_colors)
# Print the factor.
print(factor_apple)
print(nlevels(factor_apple))
# Create the data frame.
BMI <-     data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
print(BMI)
View(BMI)
library("RMySQL");
# Create a connection Object to MySQL database.
# We will connect to the sampel database named "testdb" that comes with MySql installation.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '123456', dbname = 'testdb',
host = 'localhost')
# List the tables available in this database.
dbListTables(mysqlconnection)
library(RODBC);
# Create a connection Object to MySQL database.
# We will connect to the sampel database named "testdb" that comes with MySql installation.
mysqlconnection = odbcConnect("spss_db", uid="root", pwd="123456");
sqlTables(mysqlconnection);  #查看数据库中的表
install.packages("RMySQL")
library("RMySQL");
# Create a connection Object to MySQL database.
# We will connect to the sampel database named "testdb" that comes with MySql installation.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '123456', dbname = 'sys_menu',
host = '192.168.0.177')
# List the tables available in this database.
dbListTables(mysqlconnection)
library("RMySQL");
# Create a connection Object to MySQL database.
# We will connect to the sampel database named "testdb" that comes with MySql installation.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '123456', dbname = 'sys_menu',
host = '192.168.0.177')
# List the tables available in this database.
dbListTables(mysqlconnection)
library("RMySQL");
# Create a connection Object to MySQL database.
# We will connect to the sampel database named "testdb" that comes with MySql installation.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '123456', dbname = 'sys_menu',
host = '192.168.0.177')
library("RMySQL");
# Create a connection Object to MySQL database.
# We will connect to the sampel database named "testdb" that comes with MySql installation.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '123456', dbname = 'sys_menu',
host = '192.168.0.177')
# List the tables available in this database.
dbListTables(mysqlconnection)
library("RMySQL");
# Create a connection Object to MySQL database.
# We will connect to the sampel database named "testdb" that comes with MySql installation.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '123456', dbname = 'sys_menu',
host = '192.168.0.177')
# List the tables available in this database.
dbListTables(mysqlconnection)
library("RMySQL");
# Create a connection Object to MySQL database.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '123456', dbname = 'sys_menu',host = '192.168.0.177')
install.packages("RODBC")
library(RODBC);
channel <- odbcConnect("spss_db", uid="root", pwd="123456");
sqlTables(channel);#查看数据中的表
library(RODBC);
channel <- odbcConnect("spss_db", uid="root", pwd="11111");
sqlTables(channel);#查看数据中的表
library(RODBC);
channel <- odbcConnect("spss_db", uid="root", pwd="876543");
sqlTables(channel);#查看数据中的表
("ggplot2")
library(ggplot2)
channel.tab <- table(ws.customer$Channel)
channel.tab
barplot(channel.tab, ylim=c(0,300), ylab="计数")
qplot(Channel, data=ws.customer, fill=I("grey"), ylab="计数")
qplot(Channel, data=ws.customer, fill=Region, ylab="计数")
qplot(Channel, data=ws.customer, fill=Region, ylab="比例", position="fill")
hist(ws.customer$Milk,breaks=20,xlim=c(0,80000),ylim=c(0,300),
xlab="Milk",ylab="计数",main="")
qplot(Milk,data=ws.customer, fill=I("grey"), color=I("black"),
binwidth=4000, ylab="计数")
boxplot(Milk~Channel,data=ws.customer, ylim=c(0,80000))
qplot(Channel, Milk, data=ws.customer, geom="boxplot")
plot(ws.customer$Grocery, ws.customer$Detergents_Paper,
xlab="Grocery", ylab="Detergents_Paper")
qplot(Grocery, Detergents_Paper, data=ws.customer)
qplot(Grocery, Detergents_Paper,
color=Channel, size=Fresh, data=ws.customer)
qplot(Grocery, Detergents_Paper,
color=Channel, size=Fresh, data=ws.customer, facets=~Channel)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
channel.tab <- table(ws.customer$Channel)
channel.tab
barplot(channel.tab, ylim=c(0,300), ylab="计数")
qplot(Channel, data=ws.customer, fill=I("grey"), ylab="计数")
qplot(Channel, data=ws.customer, fill=Region, ylab="计数")
qplot(Channel, data=ws.customer, fill=Region, ylab="比例", position="fill")
hist(ws.customer$Milk,breaks=20,xlim=c(0,80000),ylim=c(0,300),
xlab="Milk",ylab="计数",main="")
qplot(Milk,data=ws.customer, fill=I("grey"), color=I("black"),
binwidth=4000, ylab="计数")
boxplot(Milk~Channel,data=ws.customer, ylim=c(0,80000))
qplot(Channel, Milk, data=ws.customer, geom="boxplot")
plot(ws.customer$Grocery, ws.customer$Detergents_Paper,
xlab="Grocery", ylab="Detergents_Paper")
qplot(Grocery, Detergents_Paper, data=ws.customer)
qplot(Grocery, Detergents_Paper,
color=Channel, size=Fresh, data=ws.customer)
qplot(Grocery, Detergents_Paper,
color=Channel, size=Fresh, data=ws.customer, facets=~Channel)
library(ggplot2)
channel.tab <- table(ws.customer$Channel)
channel.tab
barplot(channel.tab, ylim=c(0,300), ylab="计数")
qplot(Channel, data=ws.customer, fill=I("grey"), ylab="计数")
qplot(Channel, data=ws.customer, fill=Region, ylab="计数")
qplot(Channel, data=ws.customer, fill=Region, ylab="比例", position="fill")
hist(ws.customer$Milk,breaks=20,xlim=c(0,80000),ylim=c(0,300),
xlab="Milk",ylab="计数",main="")
qplot(Milk,data=ws.customer, fill=I("grey"), color=I("black"),
binwidth=4000, ylab="计数")
boxplot(Milk~Channel,data=ws.customer, ylim=c(0,80000))
qplot(Channel, Milk, data=ws.customer, geom="boxplot")
plot(ws.customer$Grocery, ws.customer$Detergents_Paper,
xlab="Grocery", ylab="Detergents_Paper")
qplot(Grocery, Detergents_Paper, data=ws.customer)
qplot(Grocery, Detergents_Paper,
color=Channel, size=Fresh, data=ws.customer)
qplot(Grocery, Detergents_Paper,
color=Channel, size=Fresh, data=ws.customer, facets=~Channel)
setwd("H:/Workspaces/pycharm/R_Excavate/code/img")
# Create the data for the chart.
H <- c(7,12,28,3,41)
# Give the chart file a name.
png(file = "barchart.png")
# Plot the bar chart.
barplot(H)
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img")
H <- c(7,12,28,3,41)
M <- c("一月","二月","三月","四月","五月")
# Give the chart file a name.
png(file = "barchart.png")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "月份",ylab = "收入量",col = "green",
main = "收入图表",border = "red")
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/3/img")
setwd("H:/Workspaces/pycharm/R_Excavate/code/3/img")
H <- c(7,12,28,3,41)
M <- c("一月","二月","三月","四月","五月")
# Give the chart file a name.
png(file = "barchart.png")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "月份",ylab = "收入量",col = "green",
main = "收入图表",border = "red")
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/3/img")
H <- c(7,12,28,3,41)
M <- c("一月","二月","三月","四月","五月")
# Give the chart file a name.
png(file = "barchart.png")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "月份",ylab = "收入量",col = "green",
main = "收入图表",border = "red")
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/3/img")
H <- c(7,12,28,3,41)
M <- c("一月","二月","三月","四月","五月")
# Give the chart file a name.
png(file = "barchart.png")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "月份",ylab = "收入量",col = "green",
main = "收入图表",border = "red")
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/3/img")
H <- c(7,12,28,3,41)
M <- c("一月","二月","三月","四月","五月")
# Give the chart file a name.
png(file = "barchart.png")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "月份",ylab = "收入量",col = "green",
main = "收入图表",border = "red")
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
H <- c(7,12,28,3,41)
M <- c("一月","二月","三月","四月","五月")
# Give the chart file a name.
png(file = "barchart.png")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "月份",ylab = "收入量",col = "green",
main = "收入图表",border = "red")
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
png(file = "boxplot.png")
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars,
xlab = "气缸数",
ylab = "每加仑里程",
main = "里程数据",
notch = TRUE,
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("高","中","低")
)
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
png(file = "boxplot.png")
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars,
xlab = "气缸数",
ylab = "每加仑里程",
main = "里程数据",
notch = TRUE,
varwidth = TRUE,
col = c("green","yellow","blue"),
names = c("高","中","低")
)
# Save the file.
dev.off()
View(mtcars)
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
png(file = "boxplot.png")
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars,
xlab = "气缸数",
ylab = "每加仑里程",
main = "里程数据",
notch = TRUE,
varwidth = TRUE,
col = c("blue","green","red"),
names = c("高","中","低")
)
# Save the file.
dev.off()
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
pngv <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, main="直方图示例-2", xlab = "重量", ylab="高度",col = "blue",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
pngv <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, main="直方图示例-2", xlab = "重量", ylab="高度",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, main="直方图示例-2", xlab = "重量", ylab="高度",col = "blue",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
# Create the data for the chart.
v <- c(7,12,28,3,41)
t <- c(14,7,6,19,3)
# Give the chart file a name.
png(file = "line_chart.png")
# Plot the bar chart.
plot(v,type = "o",col = "red", xlab = "月份", ylab = "降雨量",
main = "降雨量图表")
lines(t, type = "o", col = "blue")
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
png(file = "scatterplot.png")
# Plot the matrices between 4 variables giving 12 plots.
# One variable with 3 others and total 4 variables.
pairs(~wt+mpg+disp+cyl,data = mtcars,
main = "散点图矩阵")
# Save the file.
dev.off()
install.packages("plotrix")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/3")
library("plotrix")
# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <- c("70后", "80后", "90后", "00后")
# Give the chart file a name.
png(file = "3d_pie_chart.jpg")
# Plot the chart.
pie3D(x,labels = lbl,explode = 0.1, main = "出生年龄段 - 饼状图")
# Save the file.
dev.off()
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "身高和体重回归",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "体重(Kg)",ylab = "身高(cm)")
# Save the file.
dev.off()
#
# 第4章
# 罗杰斯回归分析
#
spambase <- read.csv("spambase.data", header=F)
colnames(spambase) <- read.table("spambase.names", skip=33,
sep=":", comment.char="")[,1]
colnames(spambase)[ncol(spambase)] <- "spam"
qplot(word_freq_your, spam, data=spambase, alpha=I(0.03))
spambase %>%
group_by(spam) %>%
summarise(count=n(),
med=median(word_freq_your),
mean=mean(word_freq_your),
sd=sd(word_freq_your))
spam.your.lm <- lm(spam~word_freq_your, data=spambase)
summary(spam.your.lm)
qplot(word_freq_your, spam, data=spambase, alpha=I(0.03)) +
geom_smooth(method="lm")
spam.your.lst <- glm(spam~word_freq_your,
data=spambase, family="binomial")
spam.your.lst
a <- coef(spam.your.lst)[2]
b <- coef(spam.your.lst)[1]
lst.fun <- function(x){
1/(1+exp(-(a*x+b)))
}
qplot(word_freq_your,spam, data=spambase,
alpha=I(0.03), xlim=c(-5,15)) +
stat_function(fun=lst.fun, geom="line")
spam.your.pred <- predict(spam.your.lst, type="resp")
(tb <- table(spam=spambase$spam, pred=round(spam.your.pred)))
1-sum(diag(tb))/sum(tb)
spam.glm <- glm(spam~., data=spambase, family="binomial")
summary(spam.glm)
(spam.glm.best <- stepAIC(spam.glm))
summary(spam.glm.best)
spam.best.pred <- predict(spam.glm.best, type="resp")
(tb.best <- table(spam=spambase$spam, pred=round(spam.best.pred)))
1-sum(diag(tb.best))/sum(tb.best)
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
library(party)
# Create the input data frame.
input.dat <- readingSkills[c(1:105),]
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
install.packages("party")
#install.packages("party")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
library(party)
# Create the input data frame.
input.dat <- readingSkills[c(1:80),]
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
#install.packages("party")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
library(party)
# Create the input data frame.
input.dat <- readingSkills[c(1:105),]
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
#install.packages("party")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
library(party)
# Create the input data frame.
input.dat <- readingSkills[c(1:85),]
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
#install.packages("party")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
library(party)
# Create the input data frame.
input.dat <- readingSkills[c(1:120),]
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
#install.packages("party")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
library(party)
# Create the input data frame.
input.dat <- readingSkills[c(1:100),]
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
#install.packages("party")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
library(party)
# Create the input data frame.
input.dat <- readingSkills[c(1:110),]
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
#install.packages("party")
setwd("H:/Workspaces/pycharm/R_Excavate/code/img/4")
library(party)
# Create the input data frame.
input.dat <- readingSkills[c(1:102),]
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
